{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "DashboardService",
            "id": "injectable-DashboardService-fc90deaeca2d68da10fe0340ba1d6d035ee6284c74054836cf0d395f0314c6ce83a97abcf0e4d8fb22137b1753f20d7bd6abac20d822b5ab0df016a1300a7380",
            "file": "src/app/dashboard/services/dashboard.service.ts",
            "properties": [
                {
                    "name": "reports",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | []>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "buildFailureDriverMap",
                    "args": [
                        {
                            "name": "report",
                            "type": "Map<string | FailureDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "Map<string | FailureDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildNeighborhoodDriverMap",
                    "args": [
                        {
                            "name": "report",
                            "type": "Map<string | NeighborhoodDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "Map<string | NeighborhoodDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildSuccessDriverMap",
                    "args": [
                        {
                            "name": "report",
                            "type": "Map<string | SuccessDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "Map<string | SuccessDeliveryData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillFailureDeliveriesReport",
                    "args": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillNeighborhoodDeliveriesReport",
                    "args": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillReportData",
                    "args": [
                        {
                            "type": "ReportDataConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "ReportDataConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillSuccessDeliveriesReport",
                    "args": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Delivery[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFailureDeliveriesData",
                    "args": [],
                    "optional": false,
                    "returnType": "FailureDeliveryData[]",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNeighborhoodDeliveriesData",
                    "args": [],
                    "optional": false,
                    "returnType": "NeighborhoodDeliveryData[]",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSuccessDeliveriesData",
                    "args": [],
                    "optional": false,
                    "returnType": "SuccessDeliveryData[]",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAllReports",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resolvePath",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SuccessDeliveryData } from '../types/SuccessDeliveryData';\nimport { FailureDeliveryData } from '../types/FailureDeliveryData';\nimport { NeighborhoodDeliveryData } from '../types/NeighborhoodDeliveryData';\nimport { DeliveryService } from '@src/app/deliveries/services/delivery.service';\nimport { Delivery } from '@src/app/deliveries/types/Delivery';\nimport { Observable } from 'rxjs';\nimport { ReportDataConfiguration } from '../types/ReportDataConfiguration';\nimport { ReportType } from '../enums/ReportType';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  reports: Map<string, (SuccessDeliveryData | FailureDeliveryData | NeighborhoodDeliveryData)[]> = new Map();\n\n  constructor(private deliveryService: DeliveryService) { }\n\n  loadAllReports() {\n    return new Observable(observe => {\n      this.deliveryService.getAllDeliveries().subscribe({\n        next: (data) => {\n          this.fillSuccessDeliveriesReport(data);\n          this.fillFailureDeliveriesReport(data);\n          this.fillNeighborhoodDeliveriesReport(data);\n          observe.next(true);\n          observe.complete();\n        }, error: (err) => {\n          console.error(err);\n        }\n      })\n    })\n  }\n\n  fillSuccessDeliveriesReport(data: Delivery[]) {\n    const mapDeliveryStatusToReportField = {\n      'ENTREGUE': 'deliveriesDone',\n      'PENDENTE': 'deliveriesInProgress'\n    }\n\n    const configuration: ReportDataConfiguration = {\n      data,\n      mapBuilder: this.buildSuccessDriverMap,\n      report: new Map<string, SuccessDeliveryData>(),\n      mapDeliveryStatusToReportField,\n      keys: ['motorista.nome']\n    }\n\n    const report = this.fillReportData(configuration);\n\n    this.reports.set(ReportType.SUCCESS_DELIVERY, report);\n  }\n\n  fillFailureDeliveriesReport(data: Delivery[]) {\n    const mapDeliveryStatusToReportField = {\n      'INSUCESSO': 'deliveriesFailured',\n    }\n\n    const configuration: ReportDataConfiguration = {\n      data,\n      mapBuilder: this.buildFailureDriverMap,\n      report: new Map<string, FailureDeliveryData>(),\n      mapDeliveryStatusToReportField,\n      keys: ['motorista.nome']\n    }\n\n    const report = this.fillReportData(configuration);\n\n    this.reports.set(ReportType.FAILURE_DELIVERY, report);\n  }\n\n  fillNeighborhoodDeliveriesReport(data: Delivery[]) {\n    const mapDeliveryStatusToReportField = {\n      'ENTREGUE': 'totalDeliveriesDone'\n    }\n\n    const configuration: ReportDataConfiguration = {\n      data,\n      mapBuilder: this.buildNeighborhoodDriverMap,\n      report: new Map<string, NeighborhoodDeliveryData>(),\n      mapDeliveryStatusToReportField,\n      keys: ['cliente_destino.bairro', 'cliente_origem.bairro'],\n      totalKey: 'totalDeliveries'\n    }\n\n    const report = this.fillReportData(configuration);\n\n    this.reports.set(ReportType.NEIGHBORHOOD_DELIVERY, report);\n  }\n\n  fillReportData({\n    data, \n    mapBuilder, \n    report,\n    mapDeliveryStatusToReportField,\n    keys,\n    totalKey = ''\n  }: ReportDataConfiguration) {\n    data.forEach(item => {\n      keys.forEach(key => {\n        !report.has(this.resolvePath(item, key, {})) && mapBuilder(report, this.resolvePath(item, key, {}));\n        const mappedData = report.get(this.resolvePath(item, key, {}))!;\n        const status: string | undefined = mapDeliveryStatusToReportField[item.status_entrega]\n        status && mappedData[status as keyof typeof mappedData]++;\n        totalKey && mappedData[totalKey as keyof typeof mappedData]++;\n        report.set(this.resolvePath(item, key, {}), mappedData!);\n      })\n    });\n\n    return Array.from(report.values());\n  }\n\n  getFailureDeliveriesData(): FailureDeliveryData[] {\n    return this.reports.get(ReportType.FAILURE_DELIVERY) as FailureDeliveryData[];\n  }\n\n  getNeighborhoodDeliveriesData(): NeighborhoodDeliveryData[] {\n    return this.reports.get(ReportType.NEIGHBORHOOD_DELIVERY) as NeighborhoodDeliveryData[];\n  }\n\n  getSuccessDeliveriesData(): SuccessDeliveryData[] {\n    return this.reports.get(ReportType.SUCCESS_DELIVERY) as SuccessDeliveryData[];\n  }\n\n  buildSuccessDriverMap(report: Map<string, SuccessDeliveryData>, key: string) {\n    report.set(key, {\n      deliveriesDone: 0,\n      deliveriesInProgress: 0,\n      driverName: key\n    });\n  }\n\n  buildFailureDriverMap(report: Map<string, FailureDeliveryData>, key: string) {\n    report.set(key, {\n      deliveriesFailured: 0,\n      driverName: key\n    });\n  }\n\n  buildNeighborhoodDriverMap(report: Map<string, NeighborhoodDeliveryData>, key: string) {\n    report.set(key, {\n      totalDeliveries: 0,\n      totalDeliveriesDone: 0,\n      neighborhood: key\n    });\n  }\n\n  resolvePath(object: any, path: string, defaultValue: unknown) {\n    return path\n      .split('.')\n      .reduce((o: any, p: string) => o ? o[p] : defaultValue, object)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "deliveryService",
                        "type": "DeliveryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "deliveryService",
                        "type": "DeliveryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DeliveryService",
            "id": "injectable-DeliveryService-248622461bf6d6bbffdff5367b8b357b95bccdc22066ea0736df765719b31847b683849eff51b428d2b923ca1bcf7af3140705242d771db3123744b109405f8b",
            "file": "src/app/deliveries/services/delivery.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllDeliveries",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Delivery[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDeliveries",
                    "args": [
                        {
                            "type": "DeliveryFilterConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<Delivery[]>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "DeliveryFilterConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Delivery } from '../types/Delivery';\nimport { Status } from '../types/Status';\nimport { DeliveryFilterConfiguration } from '../types/DeliveryFilterConfiguration';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeliveryService {\n  constructor(private http: HttpClient) { }\n\n  getAllDeliveries(): Observable<Delivery[]> {\n    return this.http.get<Delivery[]>('/deliveries');\n  }\n\n  getDeliveries({ name, status, page, pageSize }: DeliveryFilterConfiguration): Observable<HttpResponse<Delivery[]>> {\n    return this.http.get<Delivery[]>('/deliveries', { params: { name, status, page, pageSize }, observe: 'response' })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SidenavService",
            "id": "injectable-SidenavService-84441308d2b89136712fb2be9496ad3f38e777019a13e6fae249ce87fa464bfb986c6e1b999746dbf093caf9d77cb6904eafd072e03e6a1719447a233c0fb8b4",
            "file": "src/app/components/sidenav/services/sidenav.service.ts",
            "properties": [
                {
                    "name": "_sidenavOpened$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getSidenavOpenAction",
                    "args": [],
                    "optional": false,
                    "returnType": "BehaviorSubject<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSidenav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidenavService {\n  private _sidenavOpened$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private http: HttpClient) { }\n\n  toggleSidenav() {\n    this._sidenavOpened$.next(!this._sidenavOpened$.value);\n  }\n\n  getSidenavOpenAction(): BehaviorSubject<boolean> {\n    return this._sidenavOpened$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-dc25383440a0aef92d19c079f5f2b30f57542c63aa150516f74578f0b70f200254e9af1edc5548ac62264e06d2cc77cd5c020dea750f79e556aceb1f53dd89ea",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'delivery-test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToolbarComponent",
                    "type": "component"
                },
                {
                    "name": "SidenavComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ToolbarComponent } from \"./components/toolbar/toolbar.component\";\nimport { SidenavComponent } from \"./components/sidenav/sidenav.component\";\nimport { FooterComponent } from \"./footer/footer.component\";\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [ToolbarComponent, SidenavComponent, FooterComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'delivery-test';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-toolbar/>\n<app-sidenav/>\n<app-footer/>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-16321fc444b3b6ff49961c3b6021604ebffacbde030422cade24432725e9f85444ff0da1bbe52fc4a7eac0b55cb7bd434c1125228f561999f9a868d25779de39",
            "file": "src/app/dashboard/dashboard.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "failureDeliveriesTableData",
                    "defaultValue": "signal(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "neighborhoodDeliveriesTableData",
                    "defaultValue": "signal(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "resizing",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "resizingDebounce",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReturnType<> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "successDeliveriesTableData",
                    "defaultValue": "signal(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadAllReports",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadFailureDeliveriesDataTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadNeighborhoodDeliveriesDataTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSuccessDeliveriesDataTable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "_event",
                            "type": "UIEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_event",
                            "type": "UIEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableDashboardComponent",
                    "type": "component"
                },
                {
                    "name": "NgxMasonryModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, signal, WritableSignal } from '@angular/core';\nimport { DashboardService } from './services/dashboard.service';\nimport { SuccessDeliveryData } from './types/SuccessDeliveryData';\nimport { FailureDeliveryData } from './types/FailureDeliveryData';\nimport { NeighborhoodDeliveryData } from './types/NeighborhoodDeliveryData';\nimport { NgxMasonryModule } from 'ngx-masonry';\nimport { CommonModule } from '@angular/common';\nimport { TableDashboardComponent } from './table/table.component';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [TableDashboardComponent, NgxMasonryModule, CommonModule],\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DashboardComponent implements OnInit {\n  \n  public successDeliveriesTableData: WritableSignal<{ displayedColumns: string[], sourceData: SuccessDeliveryData[] } | undefined> = signal(undefined);\n  public failureDeliveriesTableData: WritableSignal<{ displayedColumns: string[], sourceData: FailureDeliveryData[] } | undefined> = signal(undefined);\n  public neighborhoodDeliveriesTableData: WritableSignal<{ displayedColumns: string[], sourceData: NeighborhoodDeliveryData[] } | undefined> = signal(undefined);\n  public resizing = signal(false);\n  public resizingDebounce: ReturnType<typeof setTimeout> | undefined = undefined;\n\n  constructor(private dashboardService: DashboardService) {}\n\n  ngOnInit(): void {\n    this.loadAllReports();\n  }\n\n  loadAllReports() {\n    this.dashboardService.loadAllReports().subscribe(() => {\n      this.loadSuccessDeliveriesDataTable();\n      this.loadFailureDeliveriesDataTable();\n      this.loadNeighborhoodDeliveriesDataTable();\n    })\n  }\n\n  loadSuccessDeliveriesDataTable() {\n    const displayedColumns = ['name', 'total-pending', 'total-done'];\n    const sourceData = this.dashboardService.getSuccessDeliveriesData();\n\n    this.successDeliveriesTableData.set({\n      displayedColumns,\n      sourceData\n    })\n  }\n  loadFailureDeliveriesDataTable() {\n    const displayedColumns = ['name', 'total-failured'];\n    const sourceData = this.dashboardService.getFailureDeliveriesData();\n\n    this.failureDeliveriesTableData.set({\n      displayedColumns,\n      sourceData\n    })\n  }\n  loadNeighborhoodDeliveriesDataTable() {\n    const displayedColumns = ['neighborhood', 'total-done', 'total'];\n    const sourceData = this.dashboardService.getNeighborhoodDeliveriesData();\n\n    this.neighborhoodDeliveriesTableData.set({\n      displayedColumns,\n      sourceData\n    })\n  }\n\n  onResize(_event: UIEvent) {\n    clearTimeout(this.resizingDebounce);\n    this.resizing.set(true);\n    this.resizingDebounce = setTimeout(() => {\n      this.resizing.set(false);\n    }, 200);\n  }\n}\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "dashboardService",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-container\">\n  <div class=\"page\">\n    <ngx-masonry (window:resize)=\"onResize($event)\">\n      <div class=\"row\" [ngClass]=\"{'opacity-0': resizing()}\">\n        @if (successDeliveriesTableData()?.sourceData) {\n          <div ngxMasonryItem  class=\"col-lg-6 col-12\">\n            <app-dashboard-table\n              title=\"Andamento de entregas\"\n              subtitle=\"Pedidos que estão em rota de entrega ou finalizados\"\n              [sourceData]=\"successDeliveriesTableData()!.sourceData\"\n              [displayedColumns]=\"successDeliveriesTableData()!.displayedColumns\"\n              [bindDisplayedColumnWithElement]=\"[\n                {def: 'name', elementName: 'driverName', displayColumnName: 'Nome do motorista'}, \n                {def: 'total-pending', elementName: 'deliveriesInProgress', displayColumnName: 'Qtde. Entregas pendentes'}, \n                {def: 'total-done', elementName: 'deliveriesDone', displayColumnName: 'Qtde. Entregas bem sucedidas'}\n              ]\"\n            />\n          </div>\n        }\n    \n        @if (neighborhoodDeliveriesTableData()?.sourceData) {\n          <div ngxMasonryItem  class=\"col-lg-6 col-12\">\n            <app-dashboard-table\n              title=\"Entregas por bairro\"\n              subtitle=\"Pedidos por bairro, seja de origem ou destino\"\n              [sourceData]=\"neighborhoodDeliveriesTableData()!.sourceData\"\n              [displayedColumns]=\"neighborhoodDeliveriesTableData()!.displayedColumns\"\n              [bindDisplayedColumnWithElement]=\"[\n                {def: 'neighborhood', elementName: 'neighborhood', displayColumnName: 'Bairro'}, \n                {def: 'total-done', elementName: 'totalDeliveriesDone', displayColumnName: 'Qtde. Entregas finalizadas'}, \n                {def: 'total', elementName: 'totalDeliveries', displayColumnName: 'Qtde. Total de entregas'}\n              ]\"\n            />\n          </div>\n        }\n    \n        @if (failureDeliveriesTableData()?.sourceData) {\n          <div ngxMasonryItem  class=\"col-lg-6 col-12\">\n            <app-dashboard-table\n              title=\"Entregas mal sucedida\"\n              subtitle=\"Pedidos que tiveram insucesso na entrega\"\n              [sourceData]=\"failureDeliveriesTableData()!.sourceData\"\n              [displayedColumns]=\"failureDeliveriesTableData()!.displayedColumns\"\n              [bindDisplayedColumnWithElement]=\"[\n                {def: 'name', elementName: 'driverName', displayColumnName: 'Nome do motorista'}, \n                {def: 'total-failured', elementName: 'deliveriesFailured', displayColumnName: 'Qtde. Entregas mal sucedidas'}\n              ]\"\n            />\n          </div>\n        }\n      </div>\n    </ngx-masonry>\n  </div>\n</div>\n\n\n\n\n"
        },
        {
            "name": "DeliveriesComponent",
            "id": "component-DeliveriesComponent-c76acc48bd26a7cc4e01df1514b0e891f84f8623333f7cd7f1a85ed6a84a9e2f477b4f5c0dcc14086247055a249924a4cb5957bf37554df4dd7ebc211ba0d782",
            "file": "src/app/deliveries/deliveries.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deliveries",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./deliveries.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filters",
                    "defaultValue": "{\n    name: '',\n    status: '',\n    page: 0,\n    pageSize: 10\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeliveryFilterConfiguration",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tableData",
                    "defaultValue": "signal(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tableTotalItems",
                    "defaultValue": "signal(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "loadDeliveries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateFilters",
                    "args": [
                        {
                            "name": "filters",
                            "type": "DeliveryFilterConfiguration",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "DeliveryFilterConfiguration",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePagination",
                    "args": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "PageEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FilterComponent",
                    "type": "component"
                },
                {
                    "name": "TableComponent",
                    "type": "component"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, signal, WritableSignal } from '@angular/core';\nimport { DeliveryService } from './services/delivery.service';\nimport { DeliveryFilterConfiguration } from './types/DeliveryFilterConfiguration';\nimport { FilterComponent } from './filter/filter.component';\nimport { TableComponent } from '../components/table/table.component';\nimport { DeliveryTableSourceData } from './types/DeliveryTableSourceData';\nimport { MatPaginatorModule, PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-deliveries',\n  standalone: true,\n  imports: [FilterComponent, TableComponent, MatPaginatorModule],\n  templateUrl: './deliveries.component.html',\n  styleUrl: './deliveries.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveriesComponent implements OnInit {\n  filters: DeliveryFilterConfiguration = {\n    name: '',\n    status: '',\n    page: 0,\n    pageSize: 10\n  }\n\n  tableData: WritableSignal<{ sourceData: DeliveryTableSourceData[], displayedColumns: string[] } | undefined> = signal(undefined)\n  tableTotalItems = signal(0);\n\n  constructor(private deliveryService: DeliveryService) {}\n\n  ngOnInit() {\n    this.loadDeliveries();\n  }\n\n  updateFilters(filters: DeliveryFilterConfiguration) {\n    this.filters = filters;\n    this.loadDeliveries();\n  }\n\n  updatePagination(event: PageEvent) {\n    const page = event.pageIndex * 10;\n    const pageSize = page + 10;\n    \n    this.filters.page = page;\n    this.filters.pageSize = pageSize;\n\n    this.loadDeliveries();\n  }\n\n  loadDeliveries() {\n    this.deliveryService.getDeliveries(this.filters).subscribe(res => {\n      if (res.body) {\n        const sourceData: DeliveryTableSourceData[] = res.body.map(item => {\n          return {\n            driver: item.motorista.nome,\n            document: item.documento.toString(),\n            destinyClient: item.cliente_destino.nome,\n            destinyAddress: `${item.cliente_destino.endereco} ${item.cliente_destino.bairro} ${item.cliente_destino.cidade}`,\n            originClient: item.cliente_origem.nome,\n            originAddress: `${item.cliente_origem.endereco} ${item.cliente_origem.bairro} ${item.cliente_origem.cidade}`,\n            status: item.status_entrega\n          }\n        });\n\n        this.tableData.set({\n          sourceData,\n          displayedColumns: ['driver', 'document', 'destiny-client', 'destiny-address', 'origin-client', 'origin-address', 'status']\n        })\n\n        this.tableTotalItems.set(Number(res.headers.get('total-items')));\n      }\n    })\n  }\n}\n",
            "styleUrl": "./deliveries.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "deliveryService",
                        "type": "DeliveryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "deliveryService",
                        "type": "DeliveryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-container\">\n  <div class=\"page\">\n    <section class=\"header\">\n      <h3>Entregas</h3>\n    </section>\n    \n    <section class=\"filters\">\n      <app-deliveries-filter (loadDeliveries)=\"updateFilters($event)\"/>\n    </section>\n    \n    @if (tableData()?.sourceData) {\n      <section class=\"table\">\n        <div class=\"table-container\">\n          <p>Lista de Entregas</p>\n    \n          <app-table \n            [sourceData]=\"tableData()!.sourceData\"\n            [displayedColumns]=\"tableData()!.displayedColumns\"\n            [bindDisplayedColumnWithElement]=\"[\n              {def: 'driver', elementName: 'driver', displayColumnName: 'Motorista'}, \n              {def: 'document', elementName: 'document', displayColumnName: 'N. Documento'}, \n              {def: 'origin-client', elementName: 'originClient', displayColumnName: 'Cliente origem'},\n              {def: 'origin-address', elementName: 'originAddress', displayColumnName: 'Endereço origem'},\n              {def: 'destiny-client', elementName: 'destinyClient', displayColumnName: 'Cliente destino'},\n              {def: 'destiny-address', elementName: 'destinyAddress', displayColumnName: 'Endereço destino'},\n              {def: 'status', elementName: 'status', displayColumnName: 'Status'},\n            ]\"\n          />\n        </div>\n      </section>\n    \n      <section class=\"pagination\">\n        <mat-paginator \n          [length]=\"tableTotalItems()\"\n          [pageSize]=\"10\"\n          (page)=\"updatePagination($event)\"\n          aria-label=\"Select page\" />\n      </section>\n    }\n  </div>\n</div>\n\n"
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-451181debaeec57bc2f46e6d4e7ad17e55db062b7aa6f98d542c015a1ac80a64cea81594858390da1a68c5abba0a3eee4cecc82dc4ab983751dbdae898b0c02d",
            "file": "src/app/deliveries/filter/filter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-deliveries-filter",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "loadDeliveries",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filterForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl<string>(''),\n    status: new FormControl<Status | ''>(''),\n    page: new FormControl<number>(0),\n    pageSize: new FormControl<number>(10),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "panelOpenState",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "statusOptions",
                    "defaultValue": "signal(Object.values(Status))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, EventEmitter, Output, signal } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { Status } from '../types/Status';\n\n@Component({\n  selector: 'app-deliveries-filter',\n  standalone: true,\n  imports: [MatExpansionModule, MatFormFieldModule, MatInputModule, MatSelectModule, MatButtonModule, CommonModule, ReactiveFormsModule],\n  templateUrl: './filter.component.html',\n  styleUrl: './filter.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FilterComponent {\n  @Output() loadDeliveries = new EventEmitter();\n\n  readonly panelOpenState = signal(false);\n  public statusOptions = signal(Object.values(Status));\n  public filterForm = new FormGroup({\n    name: new FormControl<string>(''),\n    status: new FormControl<Status | ''>(''),\n    page: new FormControl<number>(0),\n    pageSize: new FormControl<number>(10),\n  });\n\n  submit() {\n    this.loadDeliveries.emit(this.filterForm.getRawValue());\n  }\n}\n",
            "styleUrl": "./filter.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"row\">\n  <div class=\"col-12\">\n    <mat-accordion>\n      <mat-expansion-panel (opened)=\"panelOpenState.set(true)\" (closed)=\"panelOpenState.set(false)\">\n        <mat-expansion-panel-header>\n          <mat-panel-title> Filtros </mat-panel-title>\n        </mat-expansion-panel-header>\n        \n        <form [formGroup]=\"filterForm\" (ngSubmit)=\"submit()\">\n          <div class=\"row\">\n            <div class=\"col-sm-6 col-12\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Nome do motorista</mat-label>\n                <input matInput formControlName=\"name\">\n              </mat-form-field>\n            </div>\n\n            <div class=\"col-sm-6 col-12\">\n              <mat-form-field appearance=\"outline\">\n                <mat-label>Status</mat-label>\n                <mat-select formControlName=\"status\">\n                  <mat-option value=\"\">Todos</mat-option>\n                  @for (option of statusOptions(); track option) {\n                    <mat-option [value]=\"option\">{{ option | titlecase }}</mat-option>\n                  }\n                </mat-select>\n              </mat-form-field>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <button type=\"submit\" mat-flat-button>Filtrar</button>\n            </div>\n          </div>\n        </form>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-822b606c4dd482f6cef732830b24d4e441af151bb17692063c9dfd6a3e836f5001c1eb459d48a17ae762ad6fccd037d5814aa740aa1ebcb133e94eeee79a9c84",
            "file": "src/app/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkedInLink",
                    "defaultValue": "'https://www.linkedin.com/in/xmatheus-lopes/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss'\n})\nexport class FooterComponent {\n  public linkedInLink = 'https://www.linkedin.com/in/xmatheus-lopes/';\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer class=\"footer\">\n  <p>Developed by</p>\n  \n  <a target=\"_blank\" [href]=\"linkedInLink\">\n    <span>Matheus Lopes</span>\n    <img src=\"svgs/linkedin.svg\">\n  </a>\n</footer>\n\n"
        },
        {
            "name": "SidenavComponent",
            "id": "component-SidenavComponent-6cc019cbd9b1c3be132cc98135ab51bc1c8110d314ec2bac5b38acd3ebfffbbdaa77791d8a3a5352f6ad4386fec5aa673281056513040bd1f9db6ca51db1b6bc",
            "file": "src/app/components/sidenav/sidenav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidenav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidenav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "drawer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDrawer | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'drawer', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sidenavItems",
                    "defaultValue": "signal([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WritableSignal<Array<literal type>>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sidenavOpened$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "subscriptions$",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isActive",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSideNavConfiguration",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeDrawerToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, Component, OnDestroy, signal, ViewChild, WritableSignal } from '@angular/core';\nimport { SidenavService } from './services/sidenav.service';\nimport { CommonModule, Location } from '@angular/common';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDrawer, MatSidenavModule } from '@angular/material/sidenav';\nimport { RouterOutlet } from '@angular/router';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-sidenav',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatSidenavModule, RouterOutlet, MatListModule, MatIconModule],\n  templateUrl: './sidenav.component.html',\n  styleUrl: './sidenav.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SidenavComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('drawer', { static: true }) drawer: MatDrawer | undefined;\n\n  public sidenavOpened$: BehaviorSubject<boolean>;\n  public subscriptions$: Subscription[] = [];\n  public sidenavItems: WritableSignal<Array<{title: string, route: string}>> = signal([]);\n  \n  constructor(\n    private sidenavService: SidenavService, \n    private location: Location\n  ) {\n    this.sidenavOpened$ = this.sidenavService.getSidenavOpenAction();\n  }\n\n  ngAfterViewInit() {\n    this.subscribeDrawerToggle();\n    this.setupSideNavConfiguration();\n  }\n\n  subscribeDrawerToggle() {\n    const sub$ = this.sidenavOpened$.subscribe(opened => {\n      opened ? this.drawer!.open() : this.drawer!.close()\n    })\n\n    this.subscriptions$.push(sub$);\n  }  \n  \n  setupSideNavConfiguration(){\n    this.sidenavItems.set([\n      {\n        title: 'Dashboard',\n        route: '/dashboard'\n      },\n      {\n        title: 'Entregas',\n        route: '/entregas'\n      }\n    ]);\n  }\n\n  isActive(route: string): boolean {\n    const currentPath = this.location.path();\n    const expression = `^${route}`;\n    return new RegExp(expression).test(`${currentPath}`);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions$.forEach(sub => sub.unsubscribe());\n  }\n}\n\n",
            "styleUrl": "./sidenav.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<mat-drawer-container class=\"drawer-container\">\n  <mat-drawer #drawer class=\"drawer-sidenav\" mode=\"over\">\n    <mat-nav-list>\n      @for (item of sidenavItems(); track item) {\n        <a mat-list-item [href]=\"item.route\" [activated]=\"isActive(item.route)\">{{ item.title }}</a>\n      }\n    </mat-nav-list>\n  </mat-drawer>\n\n  <div class=\"drawer-sidenav-content\">\n    <router-outlet></router-outlet>\n  </div>\n\n</mat-drawer-container>\n\n\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-d41bd70634c726c118cc023355ca15ce4e8470db755144dc0aeabfa5cadd2a2190a934b6111b1a69bcdd4e0eb82d4f6a8df25b6cd3de39385238c92d8c17c5f8",
            "file": "src/app/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bindDisplayedColumnWithElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "sourceData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { SuccessDeliveryData } from '../../dashboard/types/SuccessDeliveryData';\nimport { FailureDeliveryData } from '../../dashboard/types/FailureDeliveryData';\nimport { NeighborhoodDeliveryData } from '../../dashboard/types/NeighborhoodDeliveryData';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-table',\n  standalone: true,\n  imports: [MatTableModule, MatCardModule],\n  templateUrl: './table.component.html',\n  styleUrl: './table.component.scss'\n})\nexport class TableComponent {\n  @Input() title!: string;\n  @Input() subtitle!: string;\n  @Input() sourceData: any[] | undefined;\n  @Input() displayedColumns: string[] | undefined;\n  @Input() bindDisplayedColumnWithElement!: { def: string, elementName: string, displayColumnName: string}[];\n}\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (sourceData) {\n  <table mat-table [dataSource]=\"sourceData\" class=\"mat-elevation-z8\">\n    @for(item of bindDisplayedColumnWithElement; track item) {\n      <ng-container [matColumnDef]=\"item.def\">\n        <th mat-header-cell *matHeaderCellDef>{{ item.displayColumnName }}</th>\n        <td mat-cell *matCellDef=\"let element\">{{element[item.elementName]}}</td>\n      </ng-container>\n    }\n  \n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n}"
        },
        {
            "name": "TableDashboardComponent",
            "id": "component-TableDashboardComponent-5d455c10a4acd37217236bae1d05b4f95aff55cf061f453f38297f463a786fefc170e567aeb21f7802a32983b668a1415c2bf7b0100568f4c926d5fda78c0397",
            "file": "src/app/dashboard/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "bindDisplayedColumnWithElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "displayedColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "sourceData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableComponent",
                    "type": "component"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { TableComponent } from '@src/app/components/table/table.component';\n\n@Component({\n  selector: 'app-dashboard-table',\n  standalone: true,\n  imports: [TableComponent, MatCardModule],\n  templateUrl: './table.component.html',\n  styleUrl: './table.component.scss'\n})\nexport class TableDashboardComponent {\n  @Input() title!: string;\n  @Input() subtitle!: string;\n  @Input() sourceData: any[] | undefined;\n  @Input() displayedColumns: string[] | undefined;\n  @Input() bindDisplayedColumnWithElement!: { def: string, elementName: string, displayColumnName: string}[];\n}\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"table-data\">\n  <mat-card appearance=\"outlined\">\n    <div class=\"header\">\n      <h6>{{ title }}</h6>\n      <p>{{ subtitle }}</p>\n    </div>\n\n    <mat-card-content>\n      <app-table\n        [sourceData]=\"sourceData\"\n        [displayedColumns]=\"displayedColumns\"\n        [bindDisplayedColumnWithElement]=\"bindDisplayedColumnWithElement\"\n      />\n    </mat-card-content>\n  </mat-card>\n</section>"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-b6d74018ddca7a2fbeb245689d77951aa3fe92c4c7ee6d73ebad52cdc2c74bf56f014944a22e98cebacb6acc99b5bf1ee399b283f611c919c04357b1ef44b7f8",
            "file": "src/app/components/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toolbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openSideNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { SidenavService } from '../sidenav/services/sidenav.service';\n\n@Component({\n  selector: 'app-toolbar',\n  standalone: true,\n  imports: [MatToolbarModule, MatButtonModule, MatIconModule],\n  templateUrl: './toolbar.component.html',\n  styleUrl: './toolbar.component.scss'\n})\nexport class ToolbarComponent {\n  constructor(private sidenavService: SidenavService) {}\n\n  openSideNav() {\n    this.sidenavService.toggleSidenav();\n  }\n}\n",
            "styleUrl": "./toolbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sidenavService",
                        "type": "SidenavService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-toolbar class=\"toolbar\">\n  <button mat-icon-button aria-label=\"Open sidenav\" (click)=\"openSideNav()\">\n    <mat-icon color=\"primary\">menu</mat-icon>\n  </button>\n  <span class=\"title\">Entregas</span>\n</mat-toolbar>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addParam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(param: string | null, objParams: any, key: string) => {\n  if (param) objParams[key] = param;\n  return objParams;\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideHttpClient(), provideAnimationsAsync()]\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "filterBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(items: Array<any>, key: string, value: unknown) => {\n  return items.filter(item => resolvePath(item, key, {}).includes(value));\n}"
            },
            {
                "name": "handlers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  http.get('/deliveries', ({ request }) => {\n    const url = new URL(request.url);\n\n    let params: DeliveryFilterConfiguration = {} as DeliveryFilterConfiguration;\n    params = addParam(url.searchParams.get('name'), params, 'name');\n    params = addParam(url.searchParams.get('status'), params, 'status');\n    params = addParam(url.searchParams.get('page'), params, 'page');\n    params = addParam(url.searchParams.get('pageSize'), params, 'pageSize');\n    \n    let deliveriesCopy = deliveries;\n    let totalItems = deliveriesCopy.length;\n    if (hasParams(params)) {\n      if (params.name) {\n        deliveriesCopy = filterBy(deliveriesCopy, 'motorista.nome', params.name);\n      }\n\n      if (params.status) {\n        deliveriesCopy = filterBy(deliveriesCopy, 'status_entrega', params.status);\n      }\n\n      totalItems = deliveriesCopy.length;\n\n      if (params.page && params.pageSize) {\n        deliveriesCopy = sliceArr(deliveriesCopy, params.page, params.pageSize);\n      }\n    }\n    \n    return new HttpResponse(JSON.stringify(deliveriesCopy), { \n      headers: { \n        'Content-Type': 'application/json',\n        'total-items': totalItems.toString() \n      } \n    });\n  }),\n]"
            },
            {
                "name": "hasParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(params: {}) => {\n  return Object.keys(params).length > 0;\n}"
            },
            {
                "name": "resolvePath",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(object: any, path: string, defaultValue: unknown) => {\n  return path\n    .split('.')\n    .reduce((o: any, p: string) => o ? o[p] : defaultValue, object)\n}"
            },
            {
                "name": "server",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/node.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "setupServer(...handlers)"
            },
            {
                "name": "sliceArr",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(items: Array<any>, page: number, pageSize: number) => {\n  return items.slice(page, pageSize);\n}"
            },
            {
                "name": "worker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/browser.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "setupWorker(...handlers)"
            }
        ],
        "functions": [
            {
                "name": "prepareApp",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [
            {
                "name": "Delivery",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/deliveries/types/Delivery.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DeliveryFilterConfiguration",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/deliveries/types/DeliveryFilterConfiguration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DeliveryTableSourceData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/deliveries/types/DeliveryTableSourceData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "FailureDeliveryData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/dashboard/types/FailureDeliveryData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "NeighborhoodDeliveryData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/dashboard/types/NeighborhoodDeliveryData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ReportDataConfiguration",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/dashboard/types/ReportDataConfiguration.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "SuccessDeliveryData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/dashboard/types/SuccessDeliveryData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "ReportType",
                "childs": [
                    {
                        "name": "SUCCESS_DELIVERY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUCCESS_DELIVERY"
                    },
                    {
                        "name": "FAILURE_DELIVERY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FAILURE_DELIVERY"
                    },
                    {
                        "name": "NEIGHBORHOOD_DELIVERY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NEIGHBORHOOD_DELIVERY"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/dashboard/enums/ReportType.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "ENTREGUE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ENTREGUE"
                    },
                    {
                        "name": "PENDENTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PENDENTE"
                    },
                    {
                        "name": "INSUCESSO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "INSUCESSO"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/deliveries/types/Status.ts"
            }
        ],
        "groupedVariables": {
            "src/mocks/handlers.ts": [
                {
                    "name": "addParam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(param: string | null, objParams: any, key: string) => {\n  if (param) objParams[key] = param;\n  return objParams;\n}"
                },
                {
                    "name": "filterBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(items: Array<any>, key: string, value: unknown) => {\n  return items.filter(item => resolvePath(item, key, {}).includes(value));\n}"
                },
                {
                    "name": "handlers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  http.get('/deliveries', ({ request }) => {\n    const url = new URL(request.url);\n\n    let params: DeliveryFilterConfiguration = {} as DeliveryFilterConfiguration;\n    params = addParam(url.searchParams.get('name'), params, 'name');\n    params = addParam(url.searchParams.get('status'), params, 'status');\n    params = addParam(url.searchParams.get('page'), params, 'page');\n    params = addParam(url.searchParams.get('pageSize'), params, 'pageSize');\n    \n    let deliveriesCopy = deliveries;\n    let totalItems = deliveriesCopy.length;\n    if (hasParams(params)) {\n      if (params.name) {\n        deliveriesCopy = filterBy(deliveriesCopy, 'motorista.nome', params.name);\n      }\n\n      if (params.status) {\n        deliveriesCopy = filterBy(deliveriesCopy, 'status_entrega', params.status);\n      }\n\n      totalItems = deliveriesCopy.length;\n\n      if (params.page && params.pageSize) {\n        deliveriesCopy = sliceArr(deliveriesCopy, params.page, params.pageSize);\n      }\n    }\n    \n    return new HttpResponse(JSON.stringify(deliveriesCopy), { \n      headers: { \n        'Content-Type': 'application/json',\n        'total-items': totalItems.toString() \n      } \n    });\n  }),\n]"
                },
                {
                    "name": "hasParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(params: {}) => {\n  return Object.keys(params).length > 0;\n}"
                },
                {
                    "name": "resolvePath",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(object: any, path: string, defaultValue: unknown) => {\n  return path\n    .split('.')\n    .reduce((o: any, p: string) => o ? o[p] : defaultValue, object)\n}"
                },
                {
                    "name": "sliceArr",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(items: Array<any>, page: number, pageSize: number) => {\n  return items.slice(page, pageSize);\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideHttpClient(), provideAnimationsAsync()]\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/mocks/node.ts": [
                {
                    "name": "server",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/node.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "setupServer(...handlers)"
                }
            ],
            "src/mocks/browser.ts": [
                {
                    "name": "worker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/browser.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "setupWorker(...handlers)"
                }
            ]
        },
        "groupedFunctions": {
            "src/main.ts": [
                {
                    "name": "prepareApp",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/dashboard/enums/ReportType.ts": [
                {
                    "name": "ReportType",
                    "childs": [
                        {
                            "name": "SUCCESS_DELIVERY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUCCESS_DELIVERY"
                        },
                        {
                            "name": "FAILURE_DELIVERY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FAILURE_DELIVERY"
                        },
                        {
                            "name": "NEIGHBORHOOD_DELIVERY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NEIGHBORHOOD_DELIVERY"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/dashboard/enums/ReportType.ts"
                }
            ],
            "src/app/deliveries/types/Status.ts": [
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "ENTREGUE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ENTREGUE"
                        },
                        {
                            "name": "PENDENTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PENDENTE"
                        },
                        {
                            "name": "INSUCESSO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "INSUCESSO"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/deliveries/types/Status.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/deliveries/types/Delivery.ts": [
                {
                    "name": "Delivery",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/deliveries/types/Delivery.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/deliveries/types/DeliveryFilterConfiguration.ts": [
                {
                    "name": "DeliveryFilterConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/deliveries/types/DeliveryFilterConfiguration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/deliveries/types/DeliveryTableSourceData.ts": [
                {
                    "name": "DeliveryTableSourceData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/deliveries/types/DeliveryTableSourceData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/dashboard/types/FailureDeliveryData.ts": [
                {
                    "name": "FailureDeliveryData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/dashboard/types/FailureDeliveryData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/dashboard/types/NeighborhoodDeliveryData.ts": [
                {
                    "name": "NeighborhoodDeliveryData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/dashboard/types/NeighborhoodDeliveryData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/dashboard/types/ReportDataConfiguration.ts": [
                {
                    "name": "ReportDataConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/dashboard/types/ReportDataConfiguration.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/dashboard/types/SuccessDeliveryData.ts": [
                {
                    "name": "SuccessDeliveryData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/dashboard/types/SuccessDeliveryData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidenav/services/sidenav.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SidenavService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidenav/sidenav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/services/dashboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableDashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/deliveries/deliveries.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeliveriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/deliveries/filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/deliveries/services/delivery.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeliveryService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "prepareApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/browser.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "worker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "filterBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handlers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hasParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resolvePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sliceArr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/node.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "server",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}